import axios from 'axios';
import pairApi from '../api/pairApi.js';
import { ABOVE, BELOW, TO_THE_MAIN } from '../textDictionary.js';
import { updateStorage, Subscription } from '../subscription.js';
import { keyboardWrapper } from '../utils/keyboard.js';

export const DICTIONARY = {
	ADD_OBSERVER: 'ADD_OBSERVER',
	CHOOSE_TRADE_TYPE: 'CHOOSE_TRADE_TYPE',
	SET_PRICE: 'SET_PRICE',
	SET_MESSAGE: 'SET_MESSAGE',
	FINISH: 'FINISH',
}

export default {
	[DICTIONARY.ADD_OBSERVER]: {
		id: 'ADD_OBSERVER',
		text: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã (–∫ –ø—Ä–∏–º–µ—Ä—É BTCUSDT)',
		keyboard: keyboardWrapper(),
		validate: async ({text}) => {
			try {
				const res = await axios.get('https://api.binance.com/api/v3/avgPrice', {
					params: {
						symbol: text,
					},
				});
				return !!res.data;
			} catch {
				return false;
			}
		},
		onAnswer: async (msg) => {
			await pairApi.setTempPairByChatId(
				{
					chatId: msg.chat.id,
					symbol: msg.text,
				},
				msg.chat.id
			);
		},
		errorText: '–¢–∞–∫–æ–π –ø–∞—Ä—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
		getNext: () => DICTIONARY.CHOOSE_TRADE_TYPE
	},
	[DICTIONARY.CHOOSE_TRADE_TYPE]: {
		id: 'CHOOSE_TRADE_TYPE',
		text: '–ü—Ä–∏—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –±—É–¥–µ—Ç –≤—ã—à–µ/–Ω–∏–∂–µ',
		expects: [ABOVE, BELOW],
		keyboard: keyboardWrapper([
			[
				{
					text: ABOVE,
				},
				{
					text: BELOW,
				},
			],
		]),
		onAnswer: async (msg) => {
			await pairApi.updateTempPairByChatId(
				{
					type: msg.text === ABOVE ? 'ABOVE' : 'BELOW',
				},
				msg.chat.id
			);
		},
		getPrev: () => DICTIONARY.ADD_OBSERVER,
		getNext: () => DICTIONARY.SET_PRICE,
	},
	[DICTIONARY.SET_PRICE]: {
		id: 'SET_PRICE',
		text: '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
		validate: ({text}) => {
			return !isNaN(Number(text));
		},
		errorText: '–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (15000.00)',
		keyboard: keyboardWrapper(),
		onAnswer: async (msg) => {
			await pairApi.updateTempPairByChatId(
				{
					price: Number(msg.text),
				},
				msg.chat.id
			);
		},
		getPrev: () => DICTIONARY.CHOOSE_TRADE_TYPE,
		getNext: () => DICTIONARY.SET_MESSAGE,
	},
	[DICTIONARY.SET_MESSAGE]: {
		id: 'SET_MESSAGE',
		text: '–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å',
		keyboard: keyboardWrapper([
			[
				{
					text: 'üö®üö®üö® STOP LOSS üö®üö®üö®'
				},
				{
					text: 'ü§ëü§ëü§ë TAKE PROFIT ü§ëü§ëü§ë'
				},
			]
		]),
		onAnswer: async (msg) => {
			await pairApi.updateTempPairByChatId(
				{
					message: msg.text,
				},
				msg.chat.id
			);
			const pair = await pairApi.getTempPairByChatId(msg.chat.id);
			await pairApi.createPair(pair);
			await updateStorage();
			Subscription(pair.symbol);
			await pairApi.deleteTempPairByChatId(msg.chat.id);
		},
		getPrev: () => DICTIONARY.SET_PRICE,
		getNext: () => DICTIONARY.FINISH,
	},
	[DICTIONARY.FINISH]: {
		id: 'FINISH',
		text: '–ü–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
		keyboard: keyboardWrapper(
			[
				[
					{
						text: TO_THE_MAIN,
					},
				],
			],
			null,
			true
		),
	}
};
